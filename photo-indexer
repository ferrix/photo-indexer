#!/usr/bin/env python
#    Copyright (C) 2011 Jarkko Sakkinen <jarkko.sakkinen@iki.fi>
#    Copyright (C) 2011 Ferrix Hovi <ferrix@ferrix.fi>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

from optparse import OptionParser
import sys
import os
import stat
from hashlib import md5
from PIL import Image
from PIL.ExifTags import TAGS
import re
import shutil
from struct import unpack_from
from datetime import datetime

def getCR2DateTime(file):
    with open(file, 'rb') as f:
        buffer = f.read(1024)
        byte_order = unpack_from('HHLHBBL', buffer)[0]
        endian_flag = '@'
        if byte_order == 0x4D4D:
            endian_flag = '>'
        elif byte_order == 0x4949:
            endian_flag = '<'

        datetime_offset = None
        entries = unpack_from(endian_flag+'H', buffer, 0x10)[0]
        for entry in range(0,entries):
            (tag_id, tag_type, num_of_value, value) = unpack_from(endian_flag+'HHLL', buffer, 0x10+2+entry*12)

            if tag_id == 0x0132:
                assert tag_type == 2
                assert num_of_value == 20
                datetime_offset = value

        if not datetime_offset:
            return

        exif_timestamp = "".join(unpack_from(20*'s', buffer, datetime_offset)).strip('\x00')
        return datetime.strptime(exif_timestamp, '%Y:%m:%d %H:%M:%S')

if __name__ == "__main__":
    parser = OptionParser(usage="Usage: %prog [options] <source path> <dest path>")
    (options, args) = parser.parse_args()

    if len(args) < 2:
        print >> sys.stderr, "Invalid number of arguments"
        parser.print_help()
        sys.exit(1)

    source_dir_path = args[0]
    dest_dir_path = args[1]

    for source_basename in os.listdir(source_dir_path):
        source_path = "%s%s%s" % (source_dir_path, os.sep, source_basename)
        source_path = os.path.abspath(source_path)

        print "SOURCE: " + source_basename

        mode = os.stat(source_path)[stat.ST_MODE]
        if not stat.S_ISREG(mode):
            print "SKIP: Is not a regular file."
            continue

        try:
            with file(source_path) as im_file:
                source_md5 = md5()
                while True:
                    data = im_file.read(8192)
                    if not data:
                        break
                    source_md5.update(data)
                md5sum = source_md5.hexdigest()
        except:
            print "SKIP: File open failed."
            continue

        timestamp = None
        if source_path.lower().endswith('.cr2'):
            exif_dt = getCR2DateTime(source_path)
            timestamp = exif_dt.strftime('%Y%m%d%H%M%S')
        else:
            try:
                im = Image.open(source_path)
                exif = im._getexif()
                if exif == None:
                    print "SKIP: Does not have EXIF."
                    continue
                for k, v in exif.items():
                    k = TAGS.get(k, k)
                    if type(k) == str and k == "DateTimeOriginal":
                        v = re.sub(r'[: ]', r'', v)
                        timestamp = v
            except IOError:
                print "SKIP: Is not an image."
                continue


        if timestamp == None:
            print "SKIP: No timestamp."
            continue

        fext = os.path.splitext(source_basename)[1]

        dest_basename = "%s_%s%s" % (timestamp, md5sum, fext)
        dest_path = "%s%s%s" % (dest_dir_path, os.sep, dest_basename)
        dest_path = os.path.abspath(dest_path)

        shutil.copy(source_path, dest_path)
        print "DEST: " + dest_basename

